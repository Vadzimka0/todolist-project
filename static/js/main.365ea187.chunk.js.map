{"version":3,"sources":["services/api/index.ts","utils/error-utils/index.ts","store/reducers/tasks-reducer.ts","store/reducers/todolists-reducer.ts","store/reducers/auth-reducer.ts","store/reducers/app-reducer.ts","components/common/ErrorSnackbar/ErrorSnackbar.tsx","components/Login/Login.tsx","components/common/AddItemForm/AddItemForm.tsx","components/common/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","components/TodolistList/TodolistsList.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["ResponseResult","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","process","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","status","then","res","resultCode","Succesful","action","type","updateTaskAC","catch","fetchTodolistsTC","todolists","todos","forEach","tl","items","setTasksAC","isLoggedIn","setIsLoggedInAC","value","isInitialized","Alert","React","forwardRef","props","ref","elevation","variant","ErrorSnackbar","useSelector","state","app","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","auth","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","Grid","container","justifyContent","item","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","Button","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","code","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","removeTask","onClickHandler","useCallback","onChangeHandler","newIsDoneValue","checked","Completed","New","onTitleChangeHandler","newValue","className","Delete","Todolist","todolist","changeFilter","addTask","removeTodolist","changeTodolistTitle","addTaskCallback","editTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","entityStatus","map","paddingTop","TodolistsList","useEffect","thunk","removeTaskAC","removeTaskTC","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","allTodolistTasks","Paper","App","finally","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","copyState","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.365ea187.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nconst instance = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  withCredentials: true,\n  headers: {\n    'API-KEY': '3468efd3-2f7f-4b93-a6e1-e707ecfdc4e1',\n  },\n});\n\n// api\nexport const todolistsAPI = {\n  getTodolists() {\n    return instance.get<TodolistType[]>('todo-lists');\n  },\n  createTodolist(title: string) {\n    return instance.post<\n      { title: string },\n      AxiosResponse<ResponseType<{ item: TodolistType }>>\n    >('todo-lists', { title });\n  },\n  deleteTodolist(id: string) {\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\n  },\n  updateTodolist(id: string, title: string) {\n    return instance.put<{ title: string }, AxiosResponse<ResponseType>>(\n      `todo-lists/${id}`,\n      { title },\n    );\n  },\n  getTasks(todolistId: string) {\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  createTask(todolistId: string, title: string) {\n    return instance.post<\n      { title: string },\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(`todo-lists/${todolistId}/tasks`, { title });\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return instance.put<\n      UpdateTaskModelType,\n      AxiosResponse<ResponseType<{ item: TaskType }>>\n    >(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n  },\n};\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return instance.post<\n      LoginParamsType,\n      AxiosResponse<ResponseType<{ userId: number }>>\n    >('/auth/login', data);\n  },\n  logout() {\n    return instance.delete<ResponseType>('/auth/login');\n  },\n  me() {\n    return instance.get<ResponseType<MeResponseType>>('/auth/me');\n  },\n};\n\n// types\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe?: boolean;\n  captcha?: boolean;\n};\nexport type MeResponseType = {\n  id: number;\n  email: string;\n  login: string;\n};\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors: Array<string>;\n  data: D;\n};\n\nexport enum ResponseResult {\n  Succesful = 0,\n  Failed = 1,\n}\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\ntype GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: TaskType[];\n};\n","import { Dispatch } from 'redux';\n\nimport { ResponseType } from 'services/api';\nimport {\n  setAppErrorAC,\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from 'store/reducers/app-reducer';\n\nconst ERROR_MESSAGE = 0;\n\nexport const handleServerAppError = <D>(\n  data: ResponseType<D>,\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>,\n): void => {\n  if (data.messages.length) {\n    dispatch(setAppErrorAC(data.messages[ERROR_MESSAGE]));\n  } else {\n    dispatch(setAppErrorAC('Some error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleServerNetworkError = (\n  error: { message: string },\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>,\n): void => {\n  dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'));\n  dispatch(setAppStatusAC('failed'));\n};\n","import { Dispatch } from 'redux';\n\nimport {\n  SetAppErrorActionType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from './app-reducer';\nimport {\n  AddTodolistActionType,\n  ClearDataActionType,\n  RemoveTodolistActionType,\n  SetTodolistsActionType,\n} from './todolists-reducer';\n\nimport {\n  ResponseResult,\n  TaskPriorities,\n  TaskStatuses,\n  TaskType,\n  todolistsAPI,\n  UpdateTaskModelType,\n} from 'services/api';\nimport { AppRootStateType } from 'store/store';\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\n\nconst initialState: TasksStateType = {};\n\nexport const tasksReducer = (\n  state: TasksStateType = initialState,\n  action: ActionsType,\n): TasksStateType => {\n  switch (action.type) {\n    case 'REMOVE-TASK':\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId),\n      };\n    case 'ADD-TASK':\n      return {\n        ...state,\n        [action.task.todoListId]: [action.task, ...state[action.task.todoListId]],\n      };\n    case 'UPDATE-TASK':\n      return {\n        ...state,\n        [action.todolistId]: state[action.todolistId].map(t =>\n          t.id === action.taskId ? { ...t, ...action.model } : t,\n        ),\n      };\n    case 'REMOVE-TODOLIST': {\n      const copyState = { ...state };\n      delete copyState[action.id];\n      return copyState;\n    }\n    case 'ADD-TODOLIST':\n      return { ...state, [action.todolist.id]: [] };\n    case 'SET-TODOLISTS': {\n      const copyState = { ...state };\n      action.todolists.forEach(tl => {\n        copyState[tl.id] = [];\n      });\n      return copyState;\n    }\n    case 'SET-TASKS':\n      return { ...state, [action.todolistId]: action.tasks };\n    case 'CLEAR-DATA':\n      return {};\n    default:\n      return state;\n  }\n};\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n  ({ type: 'REMOVE-TASK', taskId, todolistId } as const);\nexport const addTaskAC = (task: TaskType) => ({ type: 'ADD-TASK', task } as const);\nexport const updateTaskAC = (\n  taskId: string,\n  model: UpdateDomainTaskModelType,\n  todolistId: string,\n) =>\n  ({\n    type: 'UPDATE-TASK',\n    model,\n    todolistId,\n    taskId,\n  } as const);\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n  ({\n    type: 'SET-TASKS',\n    tasks,\n    todolistId,\n  } as const);\n\n// thunks\nexport const fetchTasksTC =\n  (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI.getTasks(todolistId).then(res => {\n      const tasks = res.data.items;\n      dispatch(setTasksAC(tasks, todolistId));\n      dispatch(setAppStatusAC('succeeded'));\n    });\n  };\nexport const removeTaskTC =\n  (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.deleteTask(todolistId, taskId).then(() => {\n      const action = removeTaskAC(taskId, todolistId);\n      dispatch(action);\n    });\n  };\nexport const addTaskTC =\n  (title: string, todolistId: string) =>\n  (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'));\n    todolistsAPI\n      .createTask(todolistId, title)\n      .then(res => {\n        if (res.data.resultCode === ResponseResult.Succesful) {\n          const task = res.data.data.item;\n          const action = addTaskAC(task);\n          dispatch(action);\n          dispatch(setAppStatusAC('succeeded'));\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\nexport const updateTaskTC =\n  (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n  (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n    const task = getState().tasks[todolistId].find((t: TaskType) => t.id === taskId);\n    if (!task) {\n      // throw new Error('task not found in the state');\n      // console.warn('task not found in the state');\n      return;\n    }\n\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...domainModel,\n    };\n\n    todolistsAPI\n      .updateTask(todolistId, taskId, apiModel)\n      .then(res => {\n        if (res.data.resultCode === ResponseResult.Succesful) {\n          const action = updateTaskAC(taskId, domainModel, todolistId);\n          dispatch(action);\n        } else {\n          handleServerAppError(res.data, dispatch);\n        }\n      })\n      .catch(error => {\n        handleServerNetworkError(error, dispatch);\n      });\n  };\n\n// types\nexport type UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\ntype ActionsType =\n  | ReturnType<typeof removeTaskAC>\n  | ReturnType<typeof addTaskAC>\n  | ReturnType<typeof updateTaskAC>\n  | AddTodolistActionType\n  | RemoveTodolistActionType\n  | SetTodolistsActionType\n  | ReturnType<typeof setTasksAC>\n  | ClearDataActionType;\ntype ThunkDispatch = Dispatch<\n  ActionsType | SetAppStatusActionType | SetAppErrorActionType\n>;\n","import { Dispatch } from 'redux';\n\nimport { fetchTasksTC } from './tasks-reducer';\n\nimport { todolistsAPI, TodolistType } from 'services/api';\nimport {\n  RequestStatusType,\n  setAppStatusAC,\n  SetAppStatusActionType,\n} from 'store/reducers/app-reducer';\n\nconst initialState: Array<TodolistDomainType> = [];\n\nexport const todolistsReducer = (\n  state: Array<TodolistDomainType> = initialState,\n  action: ActionsType,\n): Array<TodolistDomainType> => {\n  switch (action.type) {\n    case 'REMOVE-TODOLIST':\n      return state.filter(tl => tl.id !== action.id);\n    case 'ADD-TODOLIST':\n      return [{ ...action.todolist, filter: 'all', entityStatus: 'idle' }, ...state];\n    case 'CHANGE-TODOLIST-TITLE':\n      return state.map(tl => (tl.id === action.id ? { ...tl, title: action.title } : tl));\n    case 'CHANGE-TODOLIST-FILTER':\n      return state.map(tl =>\n        tl.id === action.id ? { ...tl, filter: action.filter } : tl,\n      );\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\n      return state.map(tl =>\n        tl.id === action.id ? { ...tl, entityStatus: action.status } : tl,\n      );\n    case 'SET-TODOLISTS':\n      return action.todolists.map(tl => ({ ...tl, filter: 'all', entityStatus: 'idle' }));\n    case 'CLEAR-DATA':\n      return [];\n    default:\n      return state;\n  }\n};\n\n// actions\nexport const removeTodolistAC = (id: string) =>\n  ({ type: 'REMOVE-TODOLIST', id } as const);\nexport const addTodolistAC = (todolist: TodolistType) =>\n  ({ type: 'ADD-TODOLIST', todolist } as const);\nexport const changeTodolistTitleAC = (id: string, title: string) =>\n  ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title,\n  } as const);\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) =>\n  ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter,\n  } as const);\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\n  ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS',\n    id,\n    status,\n  } as const);\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\n  ({ type: 'SET-TODOLISTS', todolists } as const);\nexport const clearTodosDataAC = () => ({ type: 'CLEAR-DATA' } as const);\n\n// thunks\nexport const fetchTodolistsTC = () => (dispatch: any) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI\n    .getTodolists()\n    .then(res => {\n      dispatch(setTodolistsAC(res.data));\n      dispatch(setAppStatusAC('succeeded'));\n      return res.data; // todolists\n    })\n    .then(todos => {\n      todos.forEach(tl => {\n        dispatch(fetchTasksTC(tl.id));\n      });\n    });\n};\nexport const removeTodolistTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\n  todolistsAPI.deleteTodolist(todolistId).then(() => {\n    dispatch(removeTodolistAC(todolistId));\n    dispatch(setAppStatusAC('succeeded'));\n  });\n};\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  todolistsAPI.createTodolist(title).then(res => {\n    dispatch(addTodolistAC(res.data.data.item));\n    dispatch(setAppStatusAC('succeeded'));\n  });\n};\nexport const changeTodolistTitleTC =\n  (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.updateTodolist(id, title).then(() => {\n      dispatch(changeTodolistTitleAC(id, title));\n    });\n  };\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\nexport type ClearDataActionType = ReturnType<typeof clearTodosDataAC>;\ntype ActionsType =\n  | RemoveTodolistActionType\n  | AddTodolistActionType\n  | ReturnType<typeof changeTodolistTitleAC>\n  | ReturnType<typeof changeTodolistFilterAC>\n  | SetTodolistsActionType\n  | ReturnType<typeof changeTodolistEntityStatusAC>\n  | ClearDataActionType;\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>;\n","import { Dispatch } from 'redux';\n\nimport {\n  setAppStatusAC,\n  SetAppErrorActionType,\n  SetAppStatusActionType,\n} from './app-reducer';\nimport { ClearDataActionType, clearTodosDataAC } from './todolists-reducer';\n\nimport { authAPI, LoginParamsType, ResponseResult } from 'services/api';\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\n\nconst initialState = {\n  isLoggedIn: false,\n};\ntype InitialStateType = typeof initialState;\n\nexport const authReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType,\n): InitialStateType => {\n  switch (action.type) {\n    case 'login/SET-IS-LOGGED-IN':\n      return { ...state, isLoggedIn: action.value };\n    default:\n      return state;\n  }\n};\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n  ({ type: 'login/SET-IS-LOGGED-IN', value } as const);\n\n// thunks\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .login(data)\n    .then((res: any) => {\n      if (res.data.resultCode === ResponseResult.Succesful) {\n        dispatch(setIsLoggedInAC(true));\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n  dispatch(setAppStatusAC('loading'));\n  authAPI\n    .logout()\n    .then(res => {\n      if (res.data.resultCode === ResponseResult.Succesful) {\n        dispatch(setIsLoggedInAC(false));\n        dispatch(setAppStatusAC('succeeded'));\n        dispatch(clearTodosDataAC());\n      } else {\n        handleServerAppError(res.data, dispatch);\n      }\n    })\n    .catch(error => {\n      handleServerNetworkError(error, dispatch);\n    });\n};\n\n// types\ntype ActionsType =\n  | ReturnType<typeof setIsLoggedInAC>\n  | SetAppStatusActionType\n  | SetAppErrorActionType\n  | ClearDataActionType;\n","import { Dispatch } from 'redux';\n\nimport { authAPI, ResponseResult } from 'services/api';\nimport { setIsLoggedInAC } from 'store/reducers/auth-reducer';\n\nconst initialState: InitialStateType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state: InitialStateType = initialState,\n  action: ActionsType,\n): InitialStateType => {\n  switch (action.type) {\n    case 'APP/SET-STATUS':\n      return { ...state, status: action.status };\n    case 'APP/SET-ERROR':\n      return { ...state, error: action.error };\n    case 'APP/SET-IS-INITIALIZED':\n      return { ...state, isInitialized: action.isInitialized };\n    default:\n      return { ...state };\n  }\n};\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\nexport type InitialStateType = {\n  status: RequestStatusType;\n  error: string | null;\n  isInitialized: boolean;\n};\n\nexport const setAppErrorAC = (error: string | null) =>\n  ({ type: 'APP/SET-ERROR', error } as const);\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({ type: 'APP/SET-STATUS', status } as const);\nexport const setIsInitializedAC = (isInitialized: boolean) =>\n  ({ type: 'APP/SET-IS-INITIALIZED', isInitialized } as const);\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n  authAPI\n    .me()\n    .then(res => {\n      if (res.data.resultCode === ResponseResult.Succesful) {\n        dispatch(setIsLoggedInAC(true));\n      }\n    })\n    .finally(() => {\n      dispatch(setIsInitializedAC(true));\n    });\n};\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\nexport type SetAppIsInitializedActionType = ReturnType<typeof setIsInitializedAC>;\n\ntype ActionsType =\n  | SetAppErrorActionType\n  | SetAppStatusActionType\n  | SetAppIsInitializedActionType;\n","import React, { ReactElement, SyntheticEvent } from 'react';\n\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport Snackbar, { SnackbarCloseReason } from '@mui/material/Snackbar';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { setAppErrorAC } from 'store/reducers/app-reducer';\nimport { AppRootStateType } from 'store/store';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>((props, ref) => (\n  <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />\n));\n\nexport const ErrorSnackbar = (): ReactElement => {\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\n\n  const dispatch = useDispatch();\n\n  const handleClose = (\n    event: Event | SyntheticEvent<any, Event>,\n    reason?: SnackbarCloseReason,\n  ): void => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport Button from '@mui/material/Button';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport Grid from '@mui/material/Grid';\nimport TextField from '@mui/material/TextField';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { LoginParamsType } from 'services/api';\nimport { loginTC } from 'store/reducers/auth-reducer';\nimport { AppRootStateType } from 'store/store';\n\nexport const Login = (): ReactElement => {\n  const dispatch = useDispatch();\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    state => state.auth.isLoggedIn,\n  );\n\n  const MIN_PASSWORD_LENGTH = 0;\n\n  const formik = useFormik({\n    initialValues: {\n      email: 'wadik.nhl@gmail.com',\n      password: 'sept21Uh',\n      rememberMe: false,\n    },\n    validate: values => {\n      const errors: Partial<Omit<LoginParamsType, 'captcha'>> = {};\n      if (!values.email) {\n        errors.email = 'Required';\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n        errors.email = 'Invalid email address';\n      }\n      if (!values.password) {\n        errors.password = 'Required';\n      } else if (values.password.length < MIN_PASSWORD_LENGTH) {\n        errors.password = 'Must be 5 characters or more';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      dispatch(loginTC(values));\n      formik.resetForm();\n    },\n  });\n\n  if (isLoggedIn) {\n    return <Navigate to=\"/\" />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item justifyContent=\"center\">\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered\n                <a\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {' '}\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n              <p>or use my entered personal data:</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n              />\n              {formik.touched.email && formik.errors.email ? (\n                <div style={{ color: 'red' }}>{formik.errors.email}</div>\n              ) : null}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.touched.password && formik.errors.password ? (\n                <div style={{ color: 'red' }}>{formik.errors.password}</div>\n              ) : null}\n              <FormControlLabel\n                label=\"Remember me\"\n                control={<Checkbox {...formik.getFieldProps('rememberMe')} />}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\n\nimport { AddBox } from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport TextField from '@mui/material/TextField';\n\ntype AddItemFormPropsType = {\n  addItem: (title: string) => void;\n  // eslint-disable-next-line react/require-default-props\n  disabled?: boolean;\n};\n\nexport const AddItemForm = React.memo(\n  ({ addItem, disabled = false }: AddItemFormPropsType) => {\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    const addItemHandler = (): void => {\n      if (title.trim() !== '') {\n        addItem(title);\n        setTitle('');\n      } else {\n        setError('Title is required');\n      }\n    };\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>): void => {\n      setTitle(e.currentTarget.value);\n    };\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>): void => {\n      if (error !== null) {\n        setError(null);\n      }\n      if (e.code === 'Enter') {\n        addItemHandler();\n      }\n    };\n\n    return (\n      <div>\n        <TextField\n          variant=\"outlined\"\n          disabled={disabled}\n          error={!!error}\n          value={title}\n          onChange={onChangeHandler}\n          onKeyPress={onKeyPressHandler}\n          label=\"Title\"\n          helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  },\n);\n","import React, { ChangeEvent, useState } from 'react';\n\nimport TextField from '@mui/material/TextField';\n\ntype EditableSpanPropsType = {\n  value: string;\n  onChange: (newValue: string) => void;\n};\n\nexport const EditableSpan = React.memo(({ value, onChange }: EditableSpanPropsType) => {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(value);\n\n  const activateEditMode = (): void => {\n    setEditMode(true);\n    setTitle(value);\n  };\n  const activateViewMode = (): void => {\n    setEditMode(false);\n    onChange(title);\n  };\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>): void => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\n  ) : (\n    <span onDoubleClick={activateEditMode}>{value}</span>\n  );\n});\n","import React, { ChangeEvent, useCallback } from 'react';\n\nimport { Delete } from '@mui/icons-material';\nimport Checkbox from '@mui/material/Checkbox';\nimport IconButton from '@mui/material/IconButton';\n\nimport { EditableSpan } from 'components/common/EditableSpan/EditableSpan';\nimport { TaskStatuses, TaskType } from 'services/api';\n\ntype TaskPropsType = {\n  task: TaskType;\n  todolistId: string;\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void;\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n};\n\nexport const Task = React.memo((props: TaskPropsType) => {\n  const { task, todolistId, changeTaskStatus, changeTaskTitle, removeTask } = props;\n\n  const onClickHandler = useCallback(\n    () => removeTask(task.id, todolistId),\n    [task.id, todolistId],\n  );\n  const onChangeHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      const newIsDoneValue = e.currentTarget.checked;\n      changeTaskStatus(\n        task.id,\n        newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\n        todolistId,\n      );\n    },\n    [task.id, todolistId],\n  );\n  const onTitleChangeHandler = useCallback(\n    (newValue: string) => {\n      changeTaskTitle(task.id, newValue, todolistId);\n    },\n    [task.id, todolistId],\n  );\n\n  return (\n    <div\n      key={task.id}\n      className={task.status === TaskStatuses.Completed ? 'is-done' : ''}\n    >\n      <Checkbox\n        checked={task.status === TaskStatuses.Completed}\n        color=\"primary\"\n        onChange={onChangeHandler}\n      />\n\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\n      <IconButton onClick={onClickHandler}>\n        <Delete />\n      </IconButton>\n    </div>\n  );\n});\n","import React, { useCallback } from 'react';\n\nimport { Delete } from '@mui/icons-material';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\n\nimport { AddItemForm } from 'components/common/AddItemForm/AddItemForm';\nimport { EditableSpan } from 'components/common/EditableSpan/EditableSpan';\nimport { Task } from 'components/Task/Task';\nimport { TaskStatuses, TaskType } from 'services/api';\nimport { FilterValuesType, TodolistDomainType } from 'store/reducers/todolists-reducer';\n\ntype PropsType = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\n  addTask: (title: string, todolistId: string) => void;\n  changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void;\n  changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n  removeTodolist: (id: string) => void;\n  changeTodolistTitle: (id: string, newTitle: string) => void;\n};\n\nexport const Todolist = React.memo((props: PropsType) => {\n  const {\n    todolist,\n    tasks,\n    changeFilter,\n    addTask,\n    changeTaskStatus,\n    changeTaskTitle,\n    removeTask,\n    removeTodolist,\n    changeTodolistTitle,\n  } = props;\n\n  const addTaskCallback = useCallback(\n    (title: string) => {\n      addTask(title, todolist.id);\n    },\n    [addTask, todolist.id],\n  );\n  const removeTodolistOnClick = (): void => {\n    removeTodolist(todolist.id);\n  };\n  const editTodolistTitle = useCallback(\n    (title: string) => {\n      changeTodolistTitle(todolist.id, title);\n    },\n    [todolist.id, changeTodolistTitle],\n  );\n  const onAllClickHandler = useCallback(\n    () => changeFilter('all', todolist.id),\n    [todolist.id, changeFilter],\n  );\n  const onActiveClickHandler = useCallback(\n    () => changeFilter('active', todolist.id),\n    [todolist.id, changeFilter],\n  );\n  const onCompletedClickHandler = useCallback(\n    () => changeFilter('completed', todolist.id),\n    [todolist.id, changeFilter],\n  );\n\n  let tasksForTodolist = tasks;\n\n  if (todolist.filter === 'active') {\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\n  }\n  if (todolist.filter === 'completed') {\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\n  }\n\n  return (\n    <div>\n      <h3>\n        <EditableSpan value={todolist.title} onChange={editTodolistTitle} />\n        <IconButton\n          onClick={removeTodolistOnClick}\n          disabled={todolist.entityStatus === 'loading'}\n        >\n          <Delete />\n        </IconButton>\n      </h3>\n      <AddItemForm\n        addItem={addTaskCallback}\n        disabled={todolist.entityStatus === 'loading'}\n      />\n      <div>\n        {tasksForTodolist.map(t => (\n          <Task\n            key={t.id}\n            task={t}\n            todolistId={todolist.id}\n            removeTask={removeTask}\n            changeTaskTitle={changeTaskTitle}\n            changeTaskStatus={changeTaskStatus}\n          />\n        ))}\n      </div>\n      <div style={{ paddingTop: '10px' }}>\n        <Button\n          variant={todolist.filter === 'all' ? 'outlined' : 'text'}\n          onClick={onAllClickHandler}\n          color=\"inherit\"\n        >\n          All\n        </Button>\n        <Button\n          variant={todolist.filter === 'active' ? 'outlined' : 'text'}\n          onClick={onActiveClickHandler}\n          color=\"primary\"\n        >\n          Active\n        </Button>\n        <Button\n          variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\n          onClick={onCompletedClickHandler}\n          color=\"secondary\"\n        >\n          Completed\n        </Button>\n      </div>\n    </div>\n  );\n});\n","import React, { useCallback, useEffect } from 'react';\n\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\n\nimport { AddItemForm } from 'components/common/AddItemForm/AddItemForm';\nimport { Todolist } from 'components/Todolist/Todolist';\nimport { TaskStatuses } from 'services/api';\nimport {\n  addTaskTC,\n  removeTaskTC,\n  TasksStateType,\n  updateTaskTC,\n} from 'store/reducers/tasks-reducer';\nimport {\n  addTodolistTC,\n  changeTodolistFilterAC,\n  changeTodolistTitleTC,\n  fetchTodolistsTC,\n  FilterValuesType,\n  removeTodolistTC,\n  TodolistDomainType,\n} from 'store/reducers/todolists-reducer';\nimport { AppRootStateType } from 'store/store';\n\nexport const TodolistsList: React.FC = () => {\n  const dispatch = useDispatch();\n  const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(\n    state => state.todolists,\n  );\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks);\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    state => state.auth.isLoggedIn,\n  );\n\n  useEffect(() => {\n    if (!isLoggedIn) {\n      return;\n    }\n    const thunk = fetchTodolistsTC();\n    dispatch(thunk);\n  }, []);\n\n  const removeTask = useCallback((id: string, todolistId: string) => {\n    const thunk = removeTaskTC(id, todolistId);\n    dispatch(thunk);\n  }, []);\n  const addTask = useCallback((title: string, todolistId: string) => {\n    const thunk = addTaskTC(title, todolistId);\n    dispatch(thunk);\n  }, []);\n  const changeStatus = useCallback(\n    (id: string, status: TaskStatuses, todolistId: string) => {\n      const thunk = updateTaskTC(id, { status }, todolistId);\n      dispatch(thunk);\n    },\n    [],\n  );\n  const changeTaskTitle = useCallback(\n    (id: string, newTitle: string, todolistId: string) => {\n      const thunk = updateTaskTC(id, { title: newTitle }, todolistId);\n      dispatch(thunk);\n    },\n    [],\n  );\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n    const action = changeTodolistFilterAC(todolistId, value);\n    dispatch(action);\n  }, []);\n  const removeTodolist = useCallback((id: string) => {\n    const thunk = removeTodolistTC(id);\n    dispatch(thunk);\n  }, []);\n  const changeTodolistTitle = useCallback((id: string, title: string) => {\n    const thunk = changeTodolistTitleTC(id, title);\n    dispatch(thunk);\n  }, []);\n  const addTodolist = useCallback(\n    (title: string) => {\n      const thunk = addTodolistTC(title);\n      dispatch(thunk);\n    },\n    [dispatch],\n  );\n\n  if (!isLoggedIn) {\n    return <Navigate to=\"login\" />;\n  }\n\n  return (\n    <>\n      <Grid container style={{ padding: '20px' }}>\n        <AddItemForm addItem={addTodolist} />\n      </Grid>\n      <Grid container spacing={3}>\n        {todolists.map(tl => {\n          const allTodolistTasks = tasks[tl.id];\n\n          return (\n            <Grid item key={tl.id}>\n              <Paper style={{ padding: '10px' }}>\n                <Todolist\n                  todolist={tl}\n                  tasks={allTodolistTasks}\n                  removeTask={removeTask}\n                  changeFilter={changeFilter}\n                  addTask={addTask}\n                  changeTaskStatus={changeStatus}\n                  removeTodolist={removeTodolist}\n                  changeTaskTitle={changeTaskTitle}\n                  changeTodolistTitle={changeTodolistTitle}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import React, { ReactElement, useEffect } from 'react';\n\nimport { Menu } from '@mui/icons-material';\nimport AppBar from '@mui/material/AppBar';\nimport Button from '@mui/material/Button';\nimport CircularProgress from '@mui/material/CircularProgress/CircularProgress';\nimport Container from '@mui/material/Container';\nimport IconButton from '@mui/material/IconButton';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport { ErrorSnackbar } from 'components/common/ErrorSnackbar/ErrorSnackbar';\nimport { Login } from 'components/Login/Login';\nimport { TodolistsList } from 'components/TodolistList/TodolistsList';\nimport { initializeAppTC, RequestStatusType } from 'store/reducers/app-reducer';\nimport { logoutTC } from 'store/reducers/auth-reducer';\nimport { AppRootStateType } from 'store/store';\n\nconst App = (): ReactElement => {\n  const dispatch = useDispatch();\n  const isInitialized = useSelector<AppRootStateType, boolean>(\n    state => state.app.isInitialized,\n  );\n  const status = useSelector<AppRootStateType, RequestStatusType>(\n    state => state.app.status,\n  );\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(\n    state => state.auth.isLoggedIn,\n  );\n\n  useEffect(() => {\n    dispatch(initializeAppTC());\n  }, []);\n\n  const onClickLogout = (): void => {\n    dispatch(logoutTC());\n  };\n\n  if (!isInitialized) {\n    return (\n      <div style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          {/* <Button color=\"inherit\">{isLoggedIn ? \"Log Out\" : \"Log In\"}</Button> */}\n          {isLoggedIn && (\n            <Button color=\"inherit\" onClick={onClickLogout}>\n              Logout\n            </Button>\n          )}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress />}\n      </AppBar>\n      <Container fixed>\n        <Routes>\n          <Route path=\"/\" element={<TodolistsList />} />\n          <Route path=\"login\" element={<Login />} />\n          <Route path=\"/404\" element={<h1>404 :(</h1>} />\n          <Route path=\"*\" element={<Navigate to=\"/404\" />} />\n        </Routes>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\n// eslint-disable-next-line @typescript-eslint/explicit-function-return-type\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { authReducer, appReducer, todolistsReducer, tasksReducer } from './reducers';\n\nconst rootReducer = combineReducers({\n  app: appReducer,\n  auth: authReducer,\n  todolists: todolistsReducer,\n  tasks: tasksReducer,\n});\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\n\nimport { store } from 'store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}